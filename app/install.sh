#!/bin/bash

set -e

echo "üöÄ Installation de PhishGuard - Plateforme de Sensibilisation au Phishing"
echo "=========================================================================="

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# V√©rification des pr√©requis
echo -e "\n${YELLOW}V√©rification des pr√©requis...${NC}"

if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker n'est pas install√©${NC}"
    exit 1
fi

if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    echo -e "${RED}‚ùå Docker Compose n'est pas install√©${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Docker est install√©${NC}"
echo -e "${GREEN}‚úÖ Docker Compose est install√©${NC}"

# Cr√©ation du fichier .env
if [ ! -f .env ]; then
    echo -e "\n${YELLOW}Cr√©ation du fichier .env...${NC}"
    cp .env.example .env
    
    echo -e "${YELLOW}Configuration de l'environnement:${NC}"
    read -p "Fournisseur AI (GEMINI/OPENAI/ANTHROPIC/OLLAMA) [GEMINI]: " AI_PROVIDER
    AI_PROVIDER=${AI_PROVIDER:-GEMINI}
    
    read -p "Cl√© API AI: " AI_API_KEY
    
    read -p "Mode Sandbox par d√©faut (true/false) [true]: " SANDBOX_MODE
    SANDBOX_MODE=${SANDBOX_MODE:-true}
    
    sed -i "s/AI_PROVIDER=.*/AI_PROVIDER=$AI_PROVIDER/" .env
    sed -i "s/AI_API_KEY=.*/AI_API_KEY=$AI_API_KEY/" .env
    sed -i "s/SANDBOX_MODE=.*/SANDBOX_MODE=$SANDBOX_MODE/" .env
    
    echo -e "${GREEN}‚úÖ Fichier .env cr√©√©${NC}"
else
    echo -e "${GREEN}‚úÖ Fichier .env existe d√©j√†${NC}"
fi

# Arr√™t des conteneurs existants
echo -e "\n${YELLOW}Arr√™t des conteneurs existants...${NC}"
docker-compose down 2>/dev/null || docker compose down 2>/dev/null || true

# Construction et d√©marrage des conteneurs
echo -e "\n${YELLOW}Construction et d√©marrage des conteneurs...${NC}"
docker-compose up -d --build || docker compose up -d --build

# Attente que les services soient pr√™ts
echo -e "\n${YELLOW}Attente du d√©marrage des services...${NC}"
sleep 15

# Application des migrations
echo -e "\n${YELLOW}Application des migrations de la base de donn√©es...${NC}"
docker-compose exec -T backend npx prisma db push || docker compose exec -T backend npx prisma db push

# Seed de la base de donn√©es
echo -e "\n${YELLOW}Initialisation des donn√©es...${NC}"
docker-compose exec -T backend npm run prisma:seed || docker compose exec -T backend npm run prisma:seed

# Affichage des informations de connexion
echo -e "\n${GREEN}=========================================================================="
echo -e "‚úÖ Installation termin√©e avec succ√®s!"
echo -e "==========================================================================${NC}"
echo -e "\n${GREEN}üìã Informations de connexion:${NC}"
echo -e "   URL: ${YELLOW}http://localhost${NC}"
echo -e "   Admin: ${YELLOW}admin@local.test${NC}"
echo -e "   Password: ${YELLOW}Admin123!${NC}"
echo -e "\n${GREEN}üìß MailHog (emails de test):${NC}"
echo -e "   URL: ${YELLOW}http://localhost:8025${NC}"
echo -e "\n${GREEN}üîß Services:${NC}"
echo -e "   Frontend: ${YELLOW}http://localhost${NC}"
echo -e "   Backend: ${YELLOW}http://localhost:4000${NC}"
echo -e "   Database: ${YELLOW}localhost:5432${NC}"
echo -e "   Redis: ${YELLOW}localhost:6379${NC}"
echo -e "\n${YELLOW}‚ö†Ô∏è  IMPORTANT:${NC}"
echo -e "   - Mode Sandbox activ√© par d√©faut (aucun email r√©el envoy√©)"
echo -e "   - Configurez SMTP pour la production dans le fichier .env"
echo -e "   - Toute campagne n√©cessite une approbation RH/Admin"
echo -e "\n${GREEN}üìö Documentation:${NC}"
echo -e "   - README.md pour plus d'informations"
echo -e "   - API: http://localhost:4000/api"
echo -e "\n${GREEN}üõ†Ô∏è  Commandes utiles:${NC}"
echo -e "   Arr√™ter: ${YELLOW}docker-compose down${NC}"
echo -e "   Logs: ${YELLOW}docker-compose logs -f${NC}"
echo -e "   Red√©marrer: ${YELLOW}docker-compose restart${NC}"

echo -e "\n${GREEN}Bon usage de PhishGuard! üéØ${NC}\n"