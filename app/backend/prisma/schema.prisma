generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  password          String
  name              String
  role              Role                @default(EMPLOYEE)
  department        String?
  points            Int                 @default(0)
  level             Int                 @default(1)
  badges            String[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  campaigns         CampaignTarget[]
  reports           Report[]
  auditLogs         AuditLog[]
  trainingProgress  TrainingProgress[]
}

enum Role {
  ADMIN
  HR
  REVIEWER
  EMPLOYEE
}

model Campaign {
  id               String           @id @default(uuid())
  name             String
  description      String?
  templateId       String
  status           CampaignStatus   @default(DRAFT)
  scheduledAt      DateTime?
  completedAt      DateTime?
  approvedBy       String?
  approvedAt       DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  targets          CampaignTarget[]
  template         EmailTemplate    @relation(fields: [templateId], references: [id])
  sandboxMode      Boolean          @default(true)
}

enum CampaignStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  RUNNING
  COMPLETED
  CANCELLED
}

model CampaignTarget {
  id                String    @id @default(uuid())
  campaignId        String
  userId            String
  status            TargetStatus @default(PENDING)
  deliveredAt       DateTime?
  openedAt          DateTime?
  clickedAt         DateTime?
  reportedAt        DateTime?
  readingTime       Int?
  readingSpeed      Int?
  fastRead          Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  campaign          Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([campaignId, userId])
}

enum TargetStatus {
  PENDING
  DELIVERED
  OPENED
  CLICKED
  REPORTED
}

model EmailTemplate {
  id          String     @id @default(uuid())
  name        String     @unique
  subject     String
  body        String
  difficulty  Difficulty
  indicators  String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  campaigns   Campaign[]
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Report {
  id          String   @id @default(uuid())
  userId      String
  campaignId  String?
  description String
  severity    String
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  resource  String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TrainingModule {
  id              String              @id @default(uuid())
  title           String              @unique
  description     String
  content         String
  category        ModuleCategory
  difficulty      Difficulty
  duration        Int
  minReadingTime  Int
  points          Int                 @default(10)
  order           Int                 @default(0)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  quiz            Quiz?
  progress        TrainingProgress[]
}

enum ModuleCategory {
  BASICS
  ADVANCED
  TECHNICAL
  AWARENESS
}

model Quiz {
  id            String          @id @default(uuid())
  moduleId      String          @unique
  title         String
  questions     Json
  passingScore  Int             @default(70)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  module        TrainingModule  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

model TrainingProgress {
  id            String          @id @default(uuid())
  userId        String
  moduleId      String
  completed     Boolean         @default(false)
  completedAt   DateTime?
  score         Int?
  readingTime   Int?
  readingSpeed  Int?
  needsFollowUp Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  module        TrainingModule  @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
}

model AIJob {
  id          String   @id @default(uuid())
  type        String
  context     Json
  result      Json?
  status      String   @default("PENDING")
  error       String?
  createdAt   DateTime @default(now())
  completedAt DateTime?
}

model Settings {
  id                String   @id @default(uuid())
  minSecondsPerWord Float    @default(0.25)
  alertThresholds   Json
  sandboxMode       Boolean  @default(true)
  requireApproval   Boolean  @default(true)
  aiProvider        String   @default("GEMINI")
  aiApiKey          String?
  companyName       String   @default("PhishGuard")
  primaryColor      String   @default("#0ea5e9")
  pointsPerReport   Int      @default(50)
  pointsPerTraining Int      @default(10)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}