generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  firstName    String?
  lastName     String?
  position     String?
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
  roleId       String
  role         Role     @relation(fields: [roleId], references: [id])
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  campaignsCreated Campaign[] @relation("CampaignCreator")
  campaignTargets  CampaignTarget[]
}

model Department {
  id        String   @id @default(uuid())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions Json     @default("{}")
  users       User[]
}

model Template {
  id          String   @id @default(uuid())
  name        String
  subject     String
  body        String   @db.Text
  fromName    String
  fromEmail   String
  category    String   @default("general")
  createdAt   DateTime @default(now())
  campaigns   Campaign[]
}

model Campaign {
  id          String    @id @default(uuid())
  name        String
  subject     String
  body        String    @db.Text
  fromName    String
  fromEmail   String
  status      String    @default("draft")
  sandbox     Boolean   @default(true)
  templateId  String?
  template    Template? @relation(fields: [templateId], references: [id])
  createdById String
  createdBy   User      @relation("CampaignCreator", fields: [createdById], references: [id])
  createdAt   DateTime  @default(now())
  publishedAt DateTime?
  targets     CampaignTarget[]
}

model CampaignTarget {
  id          String    @id @default(uuid())
  campaignId  String
  campaign    Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  status      String    @default("pending")
  trackingId  String    @unique @default(uuid())
  openedAt    DateTime?
  clickedAt   DateTime?
  trainingCompleted Boolean @default(false)
  readingTime Int?
  createdAt   DateTime  @default(now())
  @@unique([campaignId, userId])
}