datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  name       String
  role       String   @default("EMPLOYEE")
  department String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  campaignsCreated    Campaign[]        @relation("CampaignCreator")
  campaignsValidated  Campaign[]        @relation("CampaignValidator")
  auditLogs           AuditLog[]
  trainingProgress    TrainingProgress[]

  @@index([email])
  @@index([role])
  @@index([department])
}

model Campaign {
  id          String    @id @default(uuid())
  name        String
  subject     String
  body        String    @db.Text
  status      String    @default("DRAFT")
  sandboxMode Boolean   @default(true)
  targetDepartments String[]
  createdAt   DateTime  @default(now())
  publishedAt DateTime?
  validatedAt DateTime?
  createdById String
  validatedById String?
  
  createdBy   User   @relation("CampaignCreator", fields: [createdById], references: [id])
  validatedBy User?  @relation("CampaignValidator", fields: [validatedById], references: [id])
  targets     CampaignTarget[]

  @@index([status])
  @@index([createdAt])
}

model CampaignTarget {
  id             String    @id @default(uuid())
  campaignId     String
  email          String
  status         String    @default("PENDING")
  openedAt       DateTime?
  clickedAt      DateTime?
  reportedAt     DateTime?
  readingMetrics Json?
  createdAt      DateTime  @default(now())

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@index([status])
}

model TrainingModule {
  id          String   @id @default(uuid())
  title       String
  description String
  content     String   @db.Text
  duration    Int
  order       Int      @default(0)
  minReadingTime Int   @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  progress TrainingProgress[]

  @@index([order])
}

model TrainingProgress {
  id          String    @id @default(uuid())
  userId      String
  moduleId    String
  completed   Boolean   @default(false)
  completedAt DateTime?
  readingTime Int       @default(0)
  fastRead    Boolean   @default(false)
  createdAt   DateTime  @default(now())

  user   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  module TrainingModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
  @@index([userId])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  details   Json?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model Settings {
  id                String   @id @default("default")
  minSecondsPerWord Float    @default(0.25)
  alertThresholds   Json     @default("{\"clickRate\": 0.8, \"fastRead\": 0.8}")
  sandboxMode       Boolean  @default(true)
  requireApproval   Boolean  @default(true)
  aiProvider        String   @default("GEMINI")
  smtpHost          String?
  smtpPort          Int      @default(587)
  smtpUser          String?
  smtpPassword      String?
  smtpFrom          String   @default("noreply@phishguard.local")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}